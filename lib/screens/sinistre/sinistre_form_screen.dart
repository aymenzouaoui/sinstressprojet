import 'dart:io';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:image_picker/image_picker.dart';
import 'package:intl/intl.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:timezone/timezone.dart' as tz;
import 'photo_upload_screen.dart';
import 'suivi_screen.dart';
import 'package:client/ViewModel/sinistre_view_model.dart';
import 'package:client/models/sinistre.dart';
import 'package:client/models/car.dart';
import 'mapScreen.dart';

class SinistreFormScreen extends StatefulWidget {
  const SinistreFormScreen({super.key});

  @override
  _SinistreFormScreenState createState() => _SinistreFormScreenState();
}

class _SinistreFormScreenState extends State<SinistreFormScreen> {
  final _formKey = GlobalKey<FormState>();
  String _claimType = '';
  String _description = '';
  DateTime? _incidentDate;
  bool _isLoading = false;
  Map<String, XFile> _selectedImages = {
    'avant': XFile(''),
    'arriere': XFile(''),
    'gauche': XFile(''),
    'droit': XFile(''),
  };
  final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
  FlutterLocalNotificationsPlugin();
  String _selectedAddress = 'No address selected';
  bool _hasInjuries = false;
  int _numInjuries = 0;
  List<Map<String, String>> _injuries = [];
  bool _hasMaterialDamage = false;
  String _materialDamageDescription = '';

  @override
  void initState() {
    super.initState();
    tz.initializeTimeZones();
  }

  Future<void> showNotification(String title, String body) async {
    const AndroidNotificationDetails androidPlatformChannelSpecifics =
    AndroidNotificationDetails(
      'your_channel_id',
      'your_channel_name',
      channelDescription: 'your channel description',
      importance: Importance.max,
      priority: Priority.high,
      showWhen: false,
    );
    const NotificationDetails platformChannelSpecifics =
    NotificationDetails(android: androidPlatformChannelSpecifics);
    await flutterLocalNotificationsPlugin.show(
      0,
      title,
      body,
      platformChannelSpecifics,
    );
  }

  void _submitForm() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true;
      });

      _formKey.currentState!.save();

      final sinistreViewModel =
      Provider.of<SinistreViewModel>(context, listen: false);

      Sinistre newSinistre = Sinistre(
        id: '1', // This should be generated by your backend
        userId: 'user1', // Replace with the actual user ID
        description: _description,
        status: 'Processing',
        location: _selectedAddress,
        photos: _selectedImages.values
            .where((file) => file.path.isNotEmpty)
            .map((file) => file.path)
            .toList(),
        dateReported: _incidentDate ?? DateTime.now(),
        car: Car(
          id: '1', // This should be generated by your backend
          make: 'Toyota',
          model: 'Corolla',
          year: 2020,
          licensePlate: 'XYZ123',
          userId: 'user1', // Replace with actual user ID
          photos: _selectedImages.values
              .where((file) => file.path.isNotEmpty)
              .map((file) => file.path)
              .toList(),
        ),
        injuries: _injuries,
        materialDamage: _hasMaterialDamage ? _materialDamageDescription : '',
      );

      try {
        await sinistreViewModel.createSinistre(newSinistre);

        setState(() {
          _isLoading = false;
        });

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Claim submitted successfully!')),
        );

        _formKey.currentState!.reset();
        setState(() {
          _claimType = '';
          _description = '';
          _incidentDate = null;
          _selectedImages = {
            'avant': XFile(''),
            'arriere': XFile(''),
            'gauche': XFile(''),
            'droit': XFile(''),
          };
          _selectedAddress = 'No address selected';
          _hasInjuries = false;
          _numInjuries = 0;
          _injuries = [];
          _hasMaterialDamage = false;
          _materialDamageDescription = '';
        });

        showNotification('Claim Status', 'Your claim status has changed.');
        final scheduledTime = DateTime.now().add(const Duration(minutes: 5));
        scheduleNotification(
            'Reminder', 'Check your claim status.', scheduledTime);

        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => SuiviScreen()),
        );
      } catch (e) {
        setState(() {
          _isLoading = false;
        });

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
              content: Text('Failed to submit claim. Please try again.')),
        );
      }
    }
  }

  Future<void> scheduleNotification(
      String title, String body, DateTime scheduledTime) async {
    await flutterLocalNotificationsPlugin.zonedSchedule(
      0,
      title,
      body,
      tz.TZDateTime.from(scheduledTime, tz.local),
      const NotificationDetails(
          android: AndroidNotificationDetails(
              'your_channel_id', 'your_channel_name',
              channelDescription: 'your channel description')),
      androidAllowWhileIdle: true,
      uiLocalNotificationDateInterpretation:
      UILocalNotificationDateInterpretation.absoluteTime,
    );
  }

  Future<void> _selectDate(BuildContext context) async {
    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: _incidentDate ?? DateTime.now(),
      firstDate: DateTime(2000),
      lastDate: DateTime(2101),
    );
    if (pickedDate != null && pickedDate != _incidentDate) {
      setState(() {
        _incidentDate = pickedDate;
      });
    }
  }

  Future<void> _navigateToMapScreen(BuildContext context) async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => MapScreen()),
    );

    if (result != null && result is String) {
      setState(() {
        _selectedAddress = result;
      });
    }
  }

  Future<void> _navigateToPhotoUploadScreenAndSubmit() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => PhotoUploadScreen(
          onPhotosSelected: (photos) {
            setState(() {
              _selectedImages = photos;
            });
          },
        ),
      ),
    );

    if (result != null) {
      _submitForm();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Report a New Claim'),
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF3366FF), Color(0xFF00CCFF)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        ),
      ),
      body: Stack(
        children: [
          Container(
            decoration: const BoxDecoration(
              gradient: LinearGradient(
                colors: [Color(0xFF1e3c72), Color(0xFF2a5298)],
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
              ),
            ),
          ),
          Center(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(16.0),
              child: Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildSectionTitle('Claim Type'),
                    DropdownButtonFormField<String>(
                      decoration: _buildInputDecoration('Select Claim Type'),
                      items: ['Accident', 'Theft', 'Damage', 'Other']
                          .map((label) => DropdownMenuItem(
                        value: label,
                        child: Text(label),
                      ))
                          .toList(),
                      onChanged: (value) {
                        setState(() {
                          _claimType = value!;
                        });
                      },
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please select a claim type';
                        }
                        return null;
                      },
                      onSaved: (value) {
                        _claimType = value!;
                      },
                    ),
                    const SizedBox(height: 16),
                    _buildSectionTitle('Description'),
                    TextFormField(
                      maxLines: 4,
                      decoration: _buildInputDecoration(
                          'Enter a description of the claim'),
                      validator: (value) {
                        if (value!.isEmpty) {
                          return 'Please enter a description';
                        }
                        return null;
                      },
                      onSaved: (value) {
                        _description = value!;
                      },
                    ),
                    const SizedBox(height: 16),
                    _buildSectionTitle('Date of Incident'),
                    InkWell(
                      onTap: () => _selectDate(context),
                      child: InputDecorator(
                        decoration:
                        _buildInputDecoration('Select Incident Date'),
                        child: Text(
                          _incidentDate == null
                              ? 'No date selected'
                              : DateFormat.yMMMd().format(_incidentDate!),
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),
                    _buildSectionTitle('Photos'),
                    ElevatedButton.icon(
                      icon: const Icon(Icons.photo),
                      label: const Text('Add Photos'),
                      onPressed: () => _navigateToPhotoUploadScreenAndSubmit(),
                    ),
                    const SizedBox(height: 16),
                    _buildSectionTitle('Address'),
                    InkWell(
                      onTap: () => _navigateToMapScreen(context),
                      child: InputDecorator(
                        decoration: _buildInputDecoration('Select Address'),
                        child: Text(_selectedAddress),
                      ),
                    ),
                    const SizedBox(height: 16),
                    _buildSectionTitle('Y A-T-Il Des Blessés'),
                    Row(
                      children: [
                        Expanded(
                          child: ListTile(
                            title: const Text('Oui'),
                            leading: Radio<bool>(
                              value: true,
                              groupValue: _hasInjuries,
                              onChanged: (value) {
                                setState(() {
                                  _hasInjuries = value!;
                                });
                              },
                            ),
                          ),
                        ),
                        Expanded(
                          child: ListTile(
                            title: const Text('Non'),
                            leading: Radio<bool>(
                              value: false,
                              groupValue: _hasInjuries,
                              onChanged: (value) {
                                setState(() {
                                  _hasInjuries = value!;
                                });
                              },
                            ),
                          ),
                        ),
                      ],
                    ),
                    if (_hasInjuries) ...[
                      const SizedBox(height: 16),
                      _buildSectionTitle('Nombre de blessés'),
                      TextFormField(
                        keyboardType: TextInputType.number,
                        decoration: _buildInputDecoration(
                            'Entrez le nombre de blessés'),
                        onChanged: (value) {
                          final int? count = int.tryParse(value);
                          if (count != null) {
                            setState(() {
                              _numInjuries = count;
                              _injuries = List.generate(
                                count,
                                    (_) => {'nom': '', 'prenom': '', 'cin': ''},
                              );
                            });
                          }
                        },
                      ),
                      const SizedBox(height: 16),
                      ListView.builder(
                        shrinkWrap: true,
                        itemCount: _numInjuries,
                        itemBuilder: (context, index) {
                          return Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              _buildSectionTitle('Nom et prénom du blessé'),
                              TextFormField(
                                decoration: _buildInputDecoration(
                                    'Entrez le nom et prénom'),
                                onChanged: (value) {
                                  setState(() {
                                    _injuries[index]['nom'] = value;
                                  });
                                },
                              ),
                              const SizedBox(height: 8),
                              _buildSectionTitle('CIN du blessé'),
                              TextFormField(
                                decoration:
                                _buildInputDecoration('Entrez le CIN'),
                                onChanged: (value) {
                                  setState(() {
                                    _injuries[index]['cin'] = value;
                                  });
                                },
                              ),
                              const SizedBox(height: 16),
                            ],
                          );
                        },
                      ),
                    ],
                    const SizedBox(height: 16),
                    _buildSectionTitle(
                        'Dégâts Matériels Autres Que Les Véhicules A Et B'),
                    Row(
                      children: [
                        Expanded(
                          child: ListTile(
                            title: const Text('Oui'),
                            leading: Radio<bool>(
                              value: true,
                              groupValue: _hasMaterialDamage,
                              onChanged: (value) {
                                setState(() {
                                  _hasMaterialDamage = value!;
                                });
                              },
                            ),
                          ),
                        ),
                        Expanded(
                          child: ListTile(
                            title: const Text('Non'),
                            leading: Radio<bool>(
                              value: false,
                              groupValue: _hasMaterialDamage,
                              onChanged: (value) {
                                setState(() {
                                  _hasMaterialDamage = value!;
                                });
                              },
                            ),
                          ),
                        ),
                      ],
                    ),
                    if (_hasMaterialDamage) ...[
                      const SizedBox(height: 16),
                      _buildSectionTitle('Description des dégâts matériels'),
                      TextFormField(
                        maxLines: 3,
                        decoration: _buildInputDecoration(
                            'Entrez la description des dégâts matériels'),
                        onChanged: (value) {
                          setState(() {
                            _materialDamageDescription = value;
                          });
                        },
                      ),
                    ],
                    const SizedBox(height: 24),
                    Center(
                      child: _isLoading
                          ? const CircularProgressIndicator()
                          : ElevatedButton(
                        onPressed: _navigateToPhotoUploadScreenAndSubmit,
                        style: ElevatedButton.styleFrom(
                          padding: const EdgeInsets.symmetric(
                              horizontal: 40, vertical: 15),
                          backgroundColor: Colors.blue,
                          textStyle: const TextStyle(fontSize: 18),
                        ),
                        child: const Text('Submit Claim'),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  InputDecoration _buildInputDecoration(String hintText) {
    return InputDecoration(
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(10),
        borderSide: BorderSide.none,
      ),
      filled: true,
      fillColor: Colors.white.withOpacity(0.1),
      hintText: hintText,
      hintStyle: TextStyle(color: Colors.white.withOpacity(0.7)),
    );
  }

  Widget _buildSectionTitle(String title) {
    return Text(
      title,
      style: TextStyle(
          fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white),
    );
  }
}
